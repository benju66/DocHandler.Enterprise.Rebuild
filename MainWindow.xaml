<!-- Folder: / -->
<!-- File: MainWindow.xaml -->
<!-- Fixed: Scope of Work List using ICollectionView for proper filtering -->
<Window x:Class="DocHandler.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        xmlns:vm="clr-namespace:DocHandler.ViewModels"
        xmlns:helpers="clr-namespace:DocHandler.Helpers"
        mc:Ignorable="d"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="DocHandler Enterprise" Height="700" Width="1000"
        WindowStartupLocation="CenterScreen"
        Closing="MainWindow_Closing">
    
    <!-- DataContext will be set in code-behind for better error handling -->
    <!--
    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>
    -->
    
    <Window.InputBindings>
        <KeyBinding Key="Enter" Modifiers="Ctrl" Command="{Binding ProcessFilesCommand}"/>
    </Window.InputBindings>
    
    <DockPanel>
        <!-- Menu Bar -->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_Set Save Location..." Command="{Binding SetSaveLocationCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Folder"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Cancel"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            
            <MenuItem Header="_Processing">
                <MenuItem Header="Save Quotes Mode" 
                          IsCheckable="True" 
                          IsChecked="{Binding SaveQuotesMode}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Save"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{Binding AutoScanCompanyNames, Converter={StaticResource AutoScanMenuHeaderConverter}}"
                          IsCheckable="True"
                          IsChecked="{Binding AutoScanCompanyNames}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Find"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            
            <MenuItem Header="_View">
                <MenuItem Header="Dark Mode" IsCheckable="True" IsChecked="{Binding IsDarkMode}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="WebCam"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            
            <MenuItem Header="_Settings">
                <MenuItem Header="_Preferences..." Command="{Binding OpenSettingsCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Setting"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            
            <MenuItem Header="_Help">
                <MenuItem Header="Performance Metrics..." Command="{Binding ShowPerformanceMetricsCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Repair"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Test Company Detection..." Command="{Binding TestCompanyDetectionCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Find"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Run Queue Diagnostic..." Command="{Binding RunQueueDiagnosticCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Repair"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="COM Object Statistics..." Command="{Binding ShowComStatsCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Repair"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Reset COM Statistics" Command="{Binding ResetComStatsCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Delete"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Test Memory Leak Fixes" Command="{Binding TestMemoryLeakFixesCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Accept"/>
                    </MenuItem.Icon>
                </MenuItem>
                                            <MenuItem Header="Test Thread Safety" Command="{Binding TestThreadSafetyCommand}">
                                <MenuItem.Icon>
                                    <ui:SymbolIcon Symbol="Play"/>
                                </MenuItem.Icon>
                            </MenuItem>
                                            <MenuItem Header="Test Error Recovery" Command="{Binding TestErrorRecoveryCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Repair"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Test Mode System" Command="{Binding TestModeSystemCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Setting"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_About..." Command="{Binding AboutCommand}">
                    <MenuItem.Icon>
                        <ui:SymbolIcon Symbol="Help"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
        
        <!-- Status Bar -->
        <StatusBar DockPanel.Dock="Bottom" Height="25">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=StatusBar}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="120"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto" MinWidth="200"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            
            <!-- Left: Mode Indicator -->
            <StatusBarItem Grid.Column="0" Margin="5,0">
                <TextBlock>
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Text" Value="Normal Mode"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SaveQuotesMode}" Value="True">
                                    <Setter Property="Text" Value="Save Quotes Mode"/>
                                    <Setter Property="FontWeight" Value="Bold"/>
                                    <Setter Property="Foreground" Value="{DynamicResource SystemControlHighlightAccentBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </StatusBarItem>
            
            <!-- Middle: Queue Progress (Clickable) -->
            <StatusBarItem Grid.Column="1" HorizontalAlignment="Center">
                <StackPanel Orientation="Horizontal" MinWidth="150">
                    <!-- Queue icon indicator -->
                    <ui:SymbolIcon Symbol="List" Margin="0,0,5,0"
                                   Visibility="{Binding QueueWindowIsOpen, Converter={StaticResource BoolToVisibilityConverter}}"/>
                    
                    <!-- Existing queue status text -->
                    <TextBlock Cursor="Hand"
                               TextDecorations="{x:Null}"
                               Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <!-- Show processing message when queue is active -->
                                <DataTrigger Binding="{Binding IsQueueProcessing}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <!-- Show completion message when queue is done -->
                                <DataTrigger Binding="{Binding ShowQueueCompletionMessage}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                    <TextBlock.Text>
                        <MultiBinding>
                            <MultiBinding.Converter>
                                <helpers:QueueStatusConverter/>
                            </MultiBinding.Converter>
                            <Binding Path="IsQueueProcessing"/>
                            <Binding Path="QueueProcessedCount"/>
                            <Binding Path="QueueTotalCount"/>
                            <Binding Path="QueueCompletionMessage"/>
                        </MultiBinding>
                    </TextBlock.Text>
                    <TextBlock.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding ShowQueueWindowCommand}"/>
                    </TextBlock.InputBindings>
                    <TextBlock.ToolTip>
                        <ToolTip Content="Click to view queue details"/>
                    </TextBlock.ToolTip>
                </TextBlock>
                </StackPanel>
            </StatusBarItem>
            
            <!-- Right: Status Message -->
            <StatusBarItem Grid.Column="2" HorizontalAlignment="Right" Margin="5,0">
                <TextBlock Text="{Binding QueueStatusMessage}" TextAlignment="Right"/>
            </StatusBarItem>
        </StatusBar>
        
        <!-- Progress Bar -->
        <ProgressBar DockPanel.Dock="Bottom" 
                     Height="4" 
                     Value="{Binding ProgressValue}"
                     Visibility="{Binding IsProcessing, Converter={StaticResource BoolToVisibilityConverter}}"/>
        
        <!-- Main Content Area -->
        <Grid Margin="5">
            <!-- Save Quotes Mode Layout - Responsive to window height -->
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SaveQuotesMode}" Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                
                <!-- Fixed sections at top and bottom with flexible scope list in middle -->
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>  <!-- Drop Zone -->
                    <RowDefinition Height="Auto"/>  <!-- Company Name -->
                    <RowDefinition Height="Auto"/>  <!-- Scope Search Box -->
                    <RowDefinition Height="*"/>     <!-- Scope List - FLEXIBLE -->
                    <RowDefinition Height="Auto"/>  <!-- Recent Scopes (when visible) -->
                    <RowDefinition Height="Auto"/>  <!-- Save Location -->
                    <RowDefinition Height="Auto"/>  <!-- Process Button -->
                </Grid.RowDefinitions>
                
                <!-- Step 1: Drop Zone - Fixed at top -->
                <Border Grid.Row="0" 
                        Name="DropBorderSaveMode"
                        BorderThickness="2" 
                        CornerRadius="10"
                        AllowDrop="True"
                        Drop="Border_Drop"
                        DragEnter="Border_DragEnter"
                        DragLeave="Border_DragLeave"
                        Height="80"
                        Margin="10,5,10,6"
                        RenderTransformOrigin="0.5,0.5">
                    
                    <!-- Add RenderTransform for scale animation -->
                    <Border.RenderTransform>
                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                    </Border.RenderTransform>
                    
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="BorderBrush" Value="#1976D2"/>
                            <Setter Property="Background" Value="#F8F9FA"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="#1565C0"/>
                                    <Setter Property="Background" Value="#E3F2FD"/>
                                    <Setter Property="BorderThickness" Value="3"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    
                    <Grid>
                        <!-- Drop Instructions (when no files) -->
                        <StackPanel x:Name="DropInstructions" 
                                    VerticalAlignment="Center" 
                                    HorizontalAlignment="Center"
                                    Visibility="{Binding Path=PendingFiles.Count, Converter={StaticResource IntToVisibilityConverter}, ConverterParameter=0}">
                            <ui:SymbolIcon Symbol="OpenFile" Width="24" Height="24" 
                                          Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"/>
                            <TextBlock Text="Drop quote documents here" 
                                      Margin="0,4,0,0" 
                                      FontSize="14"
                                      Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"/>
                        </StackPanel>
                        
                        <!-- Pending Files List (horizontal scrolling for multiple files) -->
                        <ScrollViewer HorizontalScrollBarVisibility="Auto" 
                                     VerticalScrollBarVisibility="Disabled"
                                     Margin="6"
                                     Visibility="{Binding Path=PendingFiles.Count, Converter={StaticResource IntToVisibilityConverter}, ConverterParameter=1}">
                            <ItemsControl ItemsSource="{Binding PendingFiles}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Background="{DynamicResource SystemControlBackgroundListLowBrush}"
                                                CornerRadius="4" Padding="6,3" Margin="0,0,8,0"
                                                MinWidth="160">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                
                                                <!-- Validation Status Icon -->
                                                <ui:SymbolIcon Grid.Column="0" 
                                                              Margin="0,0,6,0"
                                                              VerticalAlignment="Center"
                                                              Width="12" Height="12">
                                                    <ui:SymbolIcon.Style>
                                                        <Style TargetType="ui:SymbolIcon">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Pending">
                                                                    <Setter Property="Symbol" Value="More"/>
                                                                    <Setter Property="Foreground" Value="Gray"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Validating">
                                                                    <Setter Property="Symbol" Value="Sync"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource SystemControlHighlightAccentBrush}"/>
                                                                    <DataTrigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard RepeatBehavior="Forever">
                                                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                                                               From="0" To="360" Duration="0:0:2"/>
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </DataTrigger.EnterActions>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Valid">
                                                                    <Setter Property="Symbol" Value="Accept"/>
                                                                    <Setter Property="Foreground" Value="Green"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Invalid">
                                                                    <Setter Property="Symbol" Value="Cancel"/>
                                                                    <Setter Property="Foreground" Value="Red"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ui:SymbolIcon.Style>
                                                    <!-- RenderTransform removed - will be created dynamically by animation -->
                                                </ui:SymbolIcon>
                                                
                                                <TextBlock Grid.Column="1" Text="📄" FontSize="16" Margin="0,0,6,0" VerticalAlignment="Center"/>
                                                
                                                <StackPanel Grid.Column="2" VerticalAlignment="Center">
                                                    <TextBlock Text="{Binding FileName}" FontWeight="SemiBold" TextTrimming="CharacterEllipsis" FontSize="11"/>
                                                    <TextBlock FontSize="9" Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}">
                                                        <TextBlock.Text>
                                                            <MultiBinding StringFormat="{}{0} • {1}">
                                                                <Binding Path="FileType"/>
                                                                <Binding Path="DisplayFileSize"/>
                                                            </MultiBinding>
                                                        </TextBlock.Text>
                                                    </TextBlock>
                                                </StackPanel>
                                                
                                                <Button Grid.Column="3" 
                                                        Content="✕" 
                                                        FontSize="10"
                                                        Width="18" Height="18"
                                                        Background="Transparent"
                                                        BorderThickness="0"
                                                        Command="{Binding DataContext.RemoveFileCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                        CommandParameter="{Binding}"
                                                        ToolTip="Remove file"
                                                        Cursor="Hand">
                                                    <Button.Style>
                                                        <Style TargetType="Button">
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="Button">
                                                                        <Border Background="{TemplateBinding Background}"
                                                                                CornerRadius="9"
                                                                                Width="18" Height="18">
                                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="Background" Value="#FFEBEE"/>
                                                                                <Setter Property="Foreground" Value="#D32F2F"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsPressed" Value="True">
                                                                                <Setter Property="Background" Value="#FFCDD2"/>
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                        
                        <!-- Enhanced Success Overlay with polish -->
                        <Grid x:Name="SuccessOverlay" 
                              Visibility="Collapsed"
                              Background="Transparent"
                              IsHitTestVisible="False">
                            <!-- Add subtle background glow -->
                            <Ellipse Width="120" Height="120"
                                     Fill="{StaticResource SuccessBackgroundBrush}"
                                     Opacity="0.3"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center">
                                <Ellipse.Effect>
                                    <BlurEffect Radius="30"/>
                                </Ellipse.Effect>
                            </Ellipse>
                            
                            <StackPanel x:Name="SuccessStackPanel"
                                        VerticalAlignment="Center" 
                                        HorizontalAlignment="Center">
                                <ui:SymbolIcon x:Name="SuccessCheckmark"
                                               Symbol="Accept" 
                                               Width="48" 
                                               Height="48" 
                                               Foreground="{StaticResource SuccessBorderBrush}">
                                    <!-- Add drop shadow for depth -->
                                    <ui:SymbolIcon.Effect>
                                        <DropShadowEffect Color="Green" 
                                                          Opacity="0.3" 
                                                          BlurRadius="10" 
                                                          ShadowDepth="2"/>
                                    </ui:SymbolIcon.Effect>
                                </ui:SymbolIcon>
                                <TextBlock x:Name="SuccessMessage"
                                           Text="Successfully saved!" 
                                           Margin="0,8,0,0" 
                                           FontSize="16"
                                           FontWeight="SemiBold"
                                           Foreground="{StaticResource SuccessBorderBrush}"
                                           HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Grid>
                    </Grid>
                </Border>
                
                <!-- Step 2: Company Name - Fixed -->
                <GroupBox Grid.Row="1" 
                          Header="Company Name" 
                          Margin="10,0,10,6">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <TextBox Grid.Row="0"
                                 x:Name="CompanyNameTextBoxSaveMode"
                                 Text="{Binding CompanyNameInput, UpdateSourceTrigger=PropertyChanged}"
                                 FontSize="14"
                                 Padding="8,6"
                                 Margin="0,2,0,0"
                                 BorderThickness="1">
                            
                            <!-- Context Menu -->
                            <TextBox.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="{Binding AutoScanCompanyNames, Converter={StaticResource AutoScanMenuHeaderConverter}}"
                                              IsCheckable="True"
                                              IsChecked="{Binding AutoScanCompanyNames}">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Find"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="Edit Company Names..." Command="{Binding EditCompanyNamesCommand}">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="People"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="Cut" Command="Cut">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Cut"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Copy" Command="Copy">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Copy"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Paste" Command="Paste">
                                        <MenuItem.Icon>
                                            <ui:SymbolIcon Symbol="Paste"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </TextBox.ContextMenu>
                            
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Setter Property="Background" Value="White"/>
                                    <Setter Property="BorderBrush" Value="#E0E0E0"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="TextBox">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="6"
                                                        Padding="{TemplateBinding Padding}">
                                                    <Grid>
                                                        <ScrollViewer x:Name="PART_ContentHost" 
                                                                      Focusable="False" 
                                                                      HorizontalScrollBarVisibility="Hidden" 
                                                                      VerticalScrollBarVisibility="Hidden"/>
                                                        <!-- Placeholder text -->
                                                        <TextBlock Text="{Binding DataContext.CompanyNamePlaceholder, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                   Foreground="#9E9E9E"
                                                                   FontSize="{TemplateBinding FontSize}"
                                                                   Margin="0,0,0,0"
                                                                   VerticalAlignment="Center"
                                                                   IsHitTestVisible="False">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                    <Style.Triggers>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible"/>
                                                                        </MultiDataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="BorderBrush" Value="#BDBDBD"/>
                                                    </Trigger>
                                                    <Trigger Property="IsFocused" Value="True">
                                                        <Setter Property="BorderBrush" Value="#1976D2"/>
                                                        <Setter Property="BorderThickness" Value="2"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="#F5F5F5"/>
                                                        <Setter Property="BorderBrush" Value="#E0E0E0"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsDetectingCompany}" Value="True">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <!-- Auto-scan enabled - green border matching process button -->
                                        <DataTrigger Binding="{Binding AutoScanCompanyNames}" Value="True">
                                            <Setter Property="BorderBrush" Value="#4CAF50"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        
                        <!-- Detection Progress Indicator -->
                        <ProgressBar Grid.Row="1"
                                     IsIndeterminate="True"
                                     Height="2"
                                     Margin="0,3,0,0"
                                     Visibility="{Binding IsDetectingCompany, Converter={StaticResource BoolToVisibilityConverter}}"/>
                        
                        
                    </Grid>
                </GroupBox>
                
                <!-- Step 3a: Scope Search Box - Fixed -->
                <GroupBox Grid.Row="2" 
                          Header="Scope of Work" 
                          Margin="10,0,10,6">
                    <Grid>
                        <TextBox x:Name="ScopeSearchTextBoxSaveMode"
                                 FontSize="14"
                                 Margin="0,0,0,4"
                                 PreviewKeyDown="ScopeSearchTextBox_PreviewKeyDown"
                                 TextChanged="ScopeSearchTextBox_TextChanged"
                                 PreviewMouseDown="ScopeSearchTextBox_PreviewMouseDown"
                                 PreviewTextInput="ScopeSearchTextBox_PreviewTextInput"
                                 BorderThickness="1">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Setter Property="Text" Value="{Binding ScopeSearchText, UpdateSourceTrigger=PropertyChanged}"/>
                                    <Setter Property="Background" Value="White"/>
                                    <Setter Property="BorderBrush" Value="#E0E0E0"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="TextBox">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="4">
                                                    <Grid>
                                                        <ScrollViewer x:Name="PART_ContentHost" 
                                                                      Focusable="False" 
                                                                      HorizontalScrollBarVisibility="Hidden" 
                                                                      VerticalScrollBarVisibility="Hidden"
                                                                      Margin="8,6,35,6"/>
                                                        <!-- Placeholder text -->
                                                        <TextBlock Text="Search or select scope..."
                                                                   Foreground="#9E9E9E"
                                                                   FontSize="{TemplateBinding FontSize}"
                                                                   Margin="8,0,0,0"
                                                                   VerticalAlignment="Center"
                                                                   IsHitTestVisible="False">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                    <Style.Triggers>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                                                <Condition Binding="{Binding SelectedScope}" Value="{x:Null}"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible"/>
                                                                        </MultiDataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                        <!-- Clear button inside textbox -->
                                                        <Button x:Name="ClearButton"
                                                                HorizontalAlignment="Right"
                                                                VerticalAlignment="Center"
                                                                Margin="0,0,15,0"
                                                                Width="14" Height="14"
                                                                Padding="0"
                                                                Background="Transparent"
                                                                BorderThickness="0"
                                                                Focusable="False"
                                                                Command="{Binding DataContext.ClearScopeSearchCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                                ToolTip="Clear search and selection"
                                                                Cursor="Hand">
                                                            <Button.Style>
                                                                <Style TargetType="Button">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="Button">
                                                                                <Grid Background="{TemplateBinding Background}">
                                                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                </Grid>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter Property="Background" Value="#E0E0E0"/>
                                                                                        <Setter Property="Opacity" Value="0.8"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsPressed" Value="True">
                                                                                        <Setter Property="Background" Value="#BDBDBD"/>
                                                                                        <Setter Property="Opacity" Value="0.6"/>
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.Triggers>
                                                                        <!-- Show clear button when there's text or selection -->
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding Text, RelativeSource={RelativeSource AncestorType=TextBox}}" Value=""/>
                                                                                <Condition Binding="{Binding DataContext.SelectedScope, RelativeSource={RelativeSource AncestorType=Window}}" Value="{x:Null}"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                                        </MultiDataTrigger>
                                                                        <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource AncestorType=TextBox}, Converter={StaticResource StringNotEmptyConverter}}" Value="True">
                                                                            <Setter Property="Visibility" Value="Visible"/>
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding DataContext.SelectedScope, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource StringNotEmptyConverter}}" Value="True">
                                                                            <Setter Property="Visibility" Value="Visible"/>
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Button.Style>
                                                            <ui:SymbolIcon Symbol="Cancel" Width="10" Height="10" Foreground="#757575"/>
                                                        </Button>
                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="BorderBrush" Value="#BDBDBD"/>
                                                    </Trigger>
                                                    <Trigger Property="IsFocused" Value="True">
                                                        <Setter Property="BorderBrush" Value="#1976D2"/>
                                                        <Setter Property="BorderThickness" Value="2"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedScope, Converter={StaticResource StringNotEmptyConverter}}" Value="True">
                                            <Setter Property="Text" Value="{Binding SelectedScope}"/>
                                            <Setter Property="FontWeight" Value="SemiBold"/>
                                            <Setter Property="Background" Value="#E3F2FD"/>
                                            <Setter Property="BorderBrush" Value="#1976D2"/>
                                            <Setter Property="BorderThickness" Value="2"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                </GroupBox>
                
                <!-- Step 3b: Scope List - FLEXIBLE (grows/shrinks with window) -->
                <ListBox Grid.Row="3"
                         x:Name="ScopesListBoxSaveMode"
                         ItemsSource="{Binding FilteredScopesOfWork}"
                         SelectedItem="{Binding SelectedScope, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         ScrollViewer.VerticalScrollBarVisibility="Auto"
                         BorderThickness="1"
                         BorderBrush="#E0E0E0"
                         Background="White"
                         Margin="10,0,10,6">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Padding" Value="12,8"/>
                            <Setter Property="Margin" Value="2"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <Border x:Name="ItemBorder" 
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Padding="{TemplateBinding Padding}"
                                                CornerRadius="4">
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="ItemBorder" Property="Background" Value="#1976D2"/>
                                                <Setter Property="Foreground" Value="White"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ItemBorder" Property="Background" Value="#F5F5F5"/>
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsSelected" Value="True"/>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="ItemBorder" Property="Background" Value="#1565C0"/>
                                                <Setter Property="Foreground" Value="White"/>
                                            </MultiTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" 
                                      ToolTip="{Binding}"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
                
                <!-- Step 3c: Recent Scopes - Fixed (when visible) -->
                <Expander Grid.Row="4" 
                          Header="Recent Scopes" 
                          Margin="10,0,10,6"
                          IsExpanded="False"
                          Visibility="{Binding ShowRecentScopes, Converter={StaticResource BoolToVisibilityConverter}}">
                    <ListBox ItemsSource="{Binding RecentScopes}"
                             MaxHeight="100"
                             ScrollViewer.VerticalScrollBarVisibility="Auto"
                             BorderThickness="1"
                             BorderBrush="#E0E0E0"
                             Background="White">
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Padding" Value="8,6"/>
                                <Setter Property="Margin" Value="1"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <Border x:Name="ItemBorder" 
                                                    Background="{TemplateBinding Background}"
                                                    Padding="{TemplateBinding Padding}"
                                                    CornerRadius="3">
                                                <ContentPresenter/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="ItemBorder" Property="Background" Value="#F5F5F5"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <EventSetter Event="MouseDoubleClick" Handler="RecentScopeItem_DoubleClick"/>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}" 
                                          FontSize="12"
                                          ToolTip="Double-click to select"/>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Expander>
                
                <!-- Step 4: Save Location - Fixed -->
                <GroupBox Grid.Row="5" 
                          Header="Save Location" 
                          Margin="10,0,10,8">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <!-- Save Location Path - Clickable with smart path display -->
                        <Button Grid.Row="0" 
                                Command="{Binding OpenSaveLocationCommand}"
                                HorizontalAlignment="Stretch"
                                HorizontalContentAlignment="Center"
                                Background="Transparent"
                                BorderThickness="1"
                                BorderBrush="#E0E0E0"
                                Padding="4,6"
                                Cursor="Hand"
                                Margin="0,0,0,8">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="6"
                                                        Padding="{TemplateBinding Padding}">
                                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="#F5F5F5"/>
                                                        <Setter Property="BorderBrush" Value="#BDBDBD"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Background" Value="#E0E0E0"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                            <TextBlock Text="{Binding SessionSaveLocation, Converter={StaticResource PathDisplayConverter}}" 
                                       FontSize="12"
                                       Foreground="#1976D2"
                                       ToolTip="{Binding SessionSaveLocation}"/>
                        </Button>
                        
                        <!-- Action Buttons Row -->
                        <StackPanel Grid.Row="1" 
                                    Orientation="Horizontal" 
                                    HorizontalAlignment="Center">
                            <Button Command="{Binding SetSaveLocationCommand}"
                                    Content="Change Location"
                                    Padding="16,8"
                                    Margin="0,0,10,0"
                                    FontWeight="SemiBold">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Background" Value="White"/>
                                        <Setter Property="Foreground" Value="#424242"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="BorderBrush" Value="#E0E0E0"/>
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="6"
                                                            Padding="{TemplateBinding Padding}">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="#1976D2"/>
                                                            <Setter Property="Foreground" Value="White"/>
                                                            <Setter Property="BorderBrush" Value="#1976D2"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" Value="#1565C0"/>
                                                            <Setter Property="Foreground" Value="White"/>
                                                            <Setter Property="BorderBrush" Value="#1565C0"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                            </Button>
                            
                            <Button Command="{Binding ShowRecentLocationsCommand}"
                                    Content="Recent"
                                    Padding="16,8"
                                    FontWeight="SemiBold">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Background" Value="White"/>
                                        <Setter Property="Foreground" Value="#424242"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="BorderBrush" Value="#E0E0E0"/>
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="6"
                                                            Padding="{TemplateBinding Padding}">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="#1976D2"/>
                                                            <Setter Property="Foreground" Value="White"/>
                                                            <Setter Property="BorderBrush" Value="#1976D2"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" Value="#1565C0"/>
                                                            <Setter Property="Foreground" Value="White"/>
                                                            <Setter Property="BorderBrush" Value="#1565C0"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                    </Grid>
                </GroupBox>
                
                <!-- Step 5: Process Button - Fixed at bottom -->
                <Button Grid.Row="6" 
                        Command="{Binding ProcessFilesCommand}"
                        IsEnabled="{Binding CanProcess}"
                        HorizontalAlignment="Stretch"
                        Margin="10,0,10,5"
                        Padding="20,12"
                        FontSize="16"
                        BorderThickness="0"
                        Foreground="White">
                    <Button.Style>
                        <Style TargetType="Button">
                            <!-- Default state: Disabled/Grayed -->
                            <Setter Property="Background" Value="#BDBDBD"/>
                            <Setter Property="Foreground" Value="#757575"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="8"
                                                Padding="{TemplateBinding Padding}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <!-- Ready State: Blue when enabled -->
                                            <Trigger Property="IsEnabled" Value="True">
                                                <Setter Property="Background" Value="#1976D2"/>
                                                <Setter Property="Foreground" Value="White"/>
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            <!-- Go State: Green on hover when enabled -->
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsEnabled" Value="True"/>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="#4CAF50"/>
                                                <Setter Property="Foreground" Value="White"/>
                                            </MultiTrigger>
                                            <!-- Pressed State: Darker green when clicking -->
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsEnabled" Value="True"/>
                                                    <Condition Property="IsPressed" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="#388E3C"/>
                                                <Setter Property="Foreground" Value="White"/>
                                            </MultiTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <ui:SymbolIcon Symbol="Play" Margin="0,0,10,0"/>
                        <TextBlock FontWeight="SemiBold">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Text" Value="Complete Required Fields"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CanProcess}" Value="True">
                                            <Setter Property="Text" Value="Process Quote ▶"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </Button>
            </Grid>

            <!-- Normal Mode Layout - Keep existing two-column layout -->
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SaveQuotesMode}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                
                <!-- Main Panel: Drop Zone and Normal Mode -->
                <Grid Grid.Column="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Drop Zone for Normal Mode-->
                    <Border Grid.Row="0" 
                            Name="DropBorderNormalMode"
                            BorderThickness="2" 
                            CornerRadius="10"
                            AllowDrop="True"
                            Drop="Border_Drop"
                            DragEnter="Border_DragEnter"
                            DragLeave="Border_DragLeave"
                            Margin="5">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="BorderBrush" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}"/>
                                <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundChromeMediumLowBrush}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush" Value="{DynamicResource SystemControlHighlightAccentBrush}"/>
                                        <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundListLowBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        
                        <Grid>
                            <!-- Drop Instructions (when no files) -->
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center"
                                        Visibility="{Binding Path=PendingFiles.Count, Converter={StaticResource IntToVisibilityConverter}, ConverterParameter=0}">
                                <ui:SymbolIcon Symbol="OpenFile" Width="48" Height="48" 
                                              Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"/>
                                <TextBlock Text="{Binding StatusMessage}" 
                                          TextAlignment="Center" 
                                          Margin="10" 
                                          FontSize="16"
                                          TextWrapping="Wrap"
                                          MaxWidth="400"/>
                                <TextBlock Text="Drop PDFs, Word documents, or Excel files here" 
                                          TextAlignment="Center" 
                                          FontSize="12"
                                          Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"/>
                            </StackPanel>
                            
                            <!-- Pending Files List -->
                            <ListBox ItemsSource="{Binding PendingFiles}" 
                                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                     BorderThickness="0"
                                     Background="Transparent"
                                     Margin="10">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Border Background="{DynamicResource SystemControlBackgroundListLowBrush}"
                                                CornerRadius="4" Padding="10" Margin="0,2">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                
                                                <!-- Validation Status Icon -->
                                                <ui:SymbolIcon Grid.Column="0" 
                                                              Margin="0,0,10,0"
                                                              VerticalAlignment="Center"
                                                              Width="20" Height="20">
                                                    <ui:SymbolIcon.Style>
                                                        <Style TargetType="ui:SymbolIcon">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Pending">
                                                                    <Setter Property="Symbol" Value="More"/>
                                                                    <Setter Property="Foreground" Value="Gray"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Validating">
                                                                    <Setter Property="Symbol" Value="Sync"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource SystemControlHighlightAccentBrush}"/>
                                                                    <DataTrigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard RepeatBehavior="Forever">
                                                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                                                               From="0" To="360" Duration="0:0:2"/>
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </DataTrigger.EnterActions>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Valid">
                                                                    <Setter Property="Symbol" Value="Accept"/>
                                                                    <Setter Property="Foreground" Value="Green"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValidationStatus}" Value="Invalid">
                                                                    <Setter Property="Symbol" Value="Cancel"/>
                                                                    <Setter Property="Foreground" Value="Red"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ui:SymbolIcon.Style>
                                                    <!-- RenderTransform removed - will be created dynamically by animation -->
                                                </ui:SymbolIcon>
                                                
                                                <TextBlock Grid.Column="1" Text="📄" FontSize="24" Margin="0,0,10,0" VerticalAlignment="Center"/>
                                                
                                                <StackPanel Grid.Column="2" VerticalAlignment="Center">
                                                    <TextBlock Text="{Binding FileName}" FontWeight="SemiBold" TextTrimming="CharacterEllipsis"/>
                                                    <TextBlock FontSize="12" Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}">
                                                        <TextBlock.Text>
                                                            <MultiBinding StringFormat="{}{0} • {1}">
                                                                <Binding Path="FileType"/>
                                                                <Binding Path="DisplayFileSize"/>
                                                            </MultiBinding>
                                                        </TextBlock.Text>
                                                    </TextBlock>
                                                </StackPanel>
                                                
                                                <Button Grid.Column="4" 
                                                        Content="✕" 
                                                        FontSize="16"
                                                        Width="30" Height="30"
                                                        Background="Transparent"
                                                        BorderThickness="0"
                                                        Command="{Binding DataContext.RemoveFileCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                                        CommandParameter="{Binding}"
                                                        ToolTip="Remove file"/>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </Grid>
                    </Border>
                    
                    <!-- Process Button for Normal Mode-->
                    <Button Grid.Row="1" 
                            Command="{Binding ProcessFilesCommand}"
                            IsEnabled="{Binding CanProcess}"
                            HorizontalAlignment="Center"
                            Margin="5"
                            Padding="20,10"
                            FontSize="14"
                            Style="{StaticResource AccentButtonStyle}">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Play" Margin="0,0,10,0"/>
                            <TextBlock Text="{Binding ProcessButtonText}"/>
                        </StackPanel>
                    </Button>
                </Grid>
            </Grid>
        </Grid>
    </DockPanel>
</Window>